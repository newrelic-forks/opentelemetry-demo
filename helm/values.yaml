# Copyright (c) 2022-present New Relic Corporation. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

default:
  # list of environment variables applied to all components
  env:
    - name: OTEL_COMPONENT_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_SERVICE_NAME
      value: $(OTEL_COMPONENT_NAME)-otel
    - name: OTEL_K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: OTEL_K8S_POD_UID
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.uid
    - name: HOST_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
      # Set to HOST_IP for Daemonset mode.
    - name: OTEL_COLLECTOR_NAME
      value: "$(HOST_IP)"
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: >-
        service.name=$(OTEL_SERVICE_NAME),
        service.instance.id=$(OTEL_K8S_POD_NAME),
        k8s.pod.uid=$(OTEL_K8S_POD_UID),
        service.namespace=opentelemetry-demo,
        k8s.namespace.name=$(OTEL_K8S_NAMESPACE),
        k8s.node.name=$(OTEL_K8S_NODE_NAME),
        k8s.pod.name=$(OTEL_K8S_POD_NAME)
  # Allows overriding and additions to .Values.default.env
  envOverrides: []
  #  - name: OTEL_K8S_NODE_NAME
  #    value: "someConstantValue"
  image:
    repository: ghcr.io/open-telemetry/demo
    # Overrides the image tag whose default is the chart appVersion.
    # The service's name will be applied to the end of this value.
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  schedulingRules:
    nodeSelector: {}
    affinity: {}
    tolerations: []
  securityContext: {}
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

opentelemetry-collector:
  enabled: true
  nameOverride: otelcol
  mode: daemonset
  resources:
    limits:
      memory: 768Mi
  service:
    type: LoadBalancer
  # Configuration for ports
  ports:
    otlp:
      enabled: true
    otlp-http:
      enabled: true
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: false
    prometheus:
      enabled: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9464"
    opentelemetry_community_demo: "true"
  config:
    extensions:
      health_check: {}
      zpages: {}
    receivers:
      hostmetrics:
        collection_interval: 20s
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
          load:
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          disk:
          filesystem:
            metrics:
              system.filesystem.utilization:
                enabled: true
          network:
          paging:
            metrics:
              system.paging.utilization:
                enabled: true
      otlp:
        protocols:
          http:
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"

    connectors:
      spanmetrics: {}

    exporters:
      otlp:
        endpoint: "otlp.nr-data.net:4317"
        tls:
          insecure: false
        headers:
          api-key: ${NEW_RELIC_LICENSE_KEY}

    processors:
      batch:
        send_batch_size: 1000
        send_batch_max_size: 1000
      cumulativetodelta: {}
      resource:
        attributes:
          - key: host.id
            from_attribute: host.name
            action: upsert
          - key: k8s.cluster.name
            value: otel-community-demo
            action: insert
      resource/collector:
        attributes:
          - key: service.instance.id
            value: ${OTEL_K8S_POD_NAME}
            action: upsert
      resourcedetection:
        detectors: [env, eks, ec2]
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
      memory_limiter: null

    service:
      extensions: [health_check, zpages]
      pipelines:
        traces:
          receivers: [otlp]
          processors:
            [memory_limiter, resource, resourcedetection, k8sattributes, batch]
          exporters: [spanmetrics, otlp]
        metrics:
          receivers: [spanmetrics, hostmetrics, otlp]
          processors:
            [
              memory_limiter,
              resource,
              resourcedetection,
              k8sattributes,
              cumulativetodelta,
              batch,
            ]
          exporters: [otlp]
        logs:
          processors: [memory_limiter, k8sattributes, resource, resourcedetection, batch]
          exporters: [otlp, debug]

  clusterRole:
    # Specifies whether a clusterRole should be created
    create: true
    # Annotations to add to the clusterRole
    annotations: {}
    # The name of the clusterRole to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
    # A set of rules as documented here : https://kubernetes.io/docs/reference/access-authn-authz/rbac/
    rules:
      - apiGroups: [""]
        resources: ["pods", "nodes", "namespace"]
        verbs: ["get", "watch", "list"]

    clusterRoleBinding:
      # Annotations to add to the clusterRoleBinding
      annotations: {}
      # The name of the clusterRoleBinding to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""
  extraEnvs:
    - name: NEW_RELIC_LICENSE_KEY
      valueFrom:
        secretKeyRef:
          name: newrelic-key-secret
          key: new_relic_license_key
    - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      value: "delta"

components:
  ## Demo Components are named objects (services) with several properties
  # demoService:
  ## Enable the component (service)
  #   enabled: true
  #   useDefault:
  ## Use default environment variables
  #     env: true
  ## Override Image repository and Tag. Tag will use appVersion as default.
  ## Component's name will be applied to end of this value.
  #   imageOverride: {}
  ## Optional service definitions to apply
  #   service:
  ## Service Type to use for this component. Default is ClusterIP.
  #     type: ClusterIP
  ## Service Port to use to expose this component. Default is nil
  #     port: 8080
  ## Service Node Port to use to expose this component on a NodePort service. Default is nil
  #     nodePort: 30080
  ## Service Annotations to add to this component
  #     annotations: {}
  ## Additional service ports to use to expose this component
  #   ports:
  #     - name: extraServicePort
  #       value: 8081
  ## Environment variables to add to the component's pod
  #   env:
  ## Environment variables that upsert (append + merge) into the `env` specification for this component.
  ## A variable named OTEL_RESOURCE_ATTRIBUTES_EXTRA will have its value appended to the OTEL_RESOURCE_ATTRIBUTES value.
  #   envOverrides:
  ## Pod Scheduling rules for nodeSelector, affinity, or tolerations.
  #   schedulingRules:
  #     nodeSelector: {}
  #     affinity: {}
  #     tolerations: []
  ## Pod Annotations to add to this component
  #   podAnnotations: {}
  ## Resources for this component
  #   resources: {}
  ## Container security context for setting user ID (UID), group ID (GID) and other security policies
  #   securityContext:
  ## Ingresses rules to add for the to the component
  # ingress:
  ## Enable the creation of Ingress rules. Default is false
  #   enabled: false
  ## Annotations to add to the ingress rule
  #   annotations: {}
  ## Which Ingress class (controller) to use. Default is unspecified.
  #   ingressClassName: nginx
  ## Hosts definitions for the Ingress rule
  #   hosts:
  #     - host: demo.example.com
  ## Each host can have multiple paths/routes
  #       paths:
  #         - path: /
  #           pathType: Prefix
  #           port: 8080
  ## Optional TLS specifications for the Ingress rule
  #   tls:
  #     - secretName: demo-tls
  #       hosts:
  #         - demo.example.com
  ## Additional ingresses - only created if ingress.enabled is true
  ## Useful for when differently annotated ingress services are required
  ## Each additional ingress needs key "name" set to something unique
  #   additionalIngresses: []
  #     - name: extra-demo-ingress
  #       ingressClassName: nginx
  #       annotations: {}
  #       hosts:
  #         - host: demo.example.com
  #           paths:
  #             - path: /
  #               pathType: Prefix
  #               port: 8080
  #       tls:
  #         - secretName: demo-tls
  #           hosts:
  #             - demo.example.com
  ## Command to use in the container spec, in case you don't want to go with the default command from the image.
  #   command: []
  ## Configuration to for this component; will create a Volume, and Mount backed by an optionally created ConfigMap.
  ## The name, mountPath are required, and one of existingConfigMap or data is required.
  ## If an existing ConfigMap is not provided, the contents under data will be used for the created ConfigMap.
  #   mountedConfigMaps: []
  #     - name: my-config
  #       mountPath: /etc/config
  #       subPath:
  #       existingConfigMap: my-configmap
  #       data:
  #         my-config.yaml: |
  #           key: value
  # # Kubernetes container health check options
  #   livenessProbe: {}
  # # Optional init container to run before the pod starts.
  #   initContainers:
  #     - name: <init-container-name>
  #       image: <init-container-image>
  #       command: [list of commands for the init container to run]
  # # Replicas for the component
  #  replicas: 1
  # # Optional pod security context for setting user ID (UID), group ID (GID) and other security policies
  # # This will be applied at pod level, can be applied globally for all pods: .Values.default.podSecurityContext
  # # Or it can be applied to a specific component: .Values.components.<component-name>.podSecurityContext
  #    podSecurityContext:
  #      runAsGroup: 65534
  #      runAsNonRoot: true
  #      runAsUser: 65534

  accountingService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-accountingservice
      pullPolicy: Always
    useDefault:
      env: true
    env:
      - name: KAFKA_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-kafka:9092'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 20Mi
    initContainers:
      - name: wait-for-kafka
        image: busybox:latest
        command: ['sh', '-c', 'until nc -z -v -w30 {{ include "otel-demo.name" . }}-kafka 9092; do echo waiting for kafka; sleep 2; done;']


  adService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-adservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: AD_SERVICE_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: OTEL_LOGS_EXPORTER
        value: otlp
    resources:
      limits:
        memory: 300Mi

  cartService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-cartservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: CART_SERVICE_PORT
        value: "8080"
      - name: ASPNETCORE_URLS
        value: http://*:$(CART_SERVICE_PORT)
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: REDIS_ADDR
        value: '{{ include "otel-demo.name" . }}-redis:6379'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_EXPORTER_OTLP_LOGS_ENDPOINT
        value: "https://otlp.nr-data.net:4317"
      - name: OTEL_EXPORTER_OTLP_LOGS_HEADERS
        value: "api-key=$NEW_RELIC_LICENSE_KEY"
      - name: OTEL_LOGS_EXPORTER
        value: otlp
      - name: NEW_RELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            name: newrelic-key-secret
            key: new_relic_license_key
    resources:
      limits:
        memory: 160Mi
    initContainers:
      - name: wait-for-redis
        image: busybox:latest
        command: ['sh', '-c', 'until nc -z -v -w30 {{ include "otel-demo.name" . }}-redis 6379; do echo waiting for redis; sleep 2; done;']

  checkoutService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-checkoutservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: CHECKOUT_SERVICE_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: CART_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-cartservice:8080'
      - name: CURRENCY_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
      - name: EMAIL_SERVICE_ADDR
        value: 'http://{{ include "otel-demo.name" . }}-emailservice:8080'
      - name: PAYMENT_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-paymentservice:8080'
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
      - name: SHIPPING_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
      - name: KAFKA_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-kafka:9092'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_LOGS_EXPORTER
        value: otlp
    resources:
      limits:
        memory: 20Mi
    initContainers:
      - name: wait-for-kafka
        image: busybox:latest
        command: ['sh', '-c', 'until nc -z -v -w30 {{ include "otel-demo.name" . }}-kafka 9092; do echo waiting for kafka; sleep 2; done;']

  currencyService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-currencyservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: CURRENCY_SERVICE_PORT
        value: "8080"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: VERSION
        value: "{{ .Chart.AppVersion }}"
    resources:
      limits:
        memory: 20Mi

  emailService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-emailservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: EMAIL_SERVICE_PORT
        value: "8080"
      - name: APP_ENV
        value: production
      - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
    resources:
      limits:
        memory: 100Mi

  frauddetectionService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-frauddetectionservice
      pullPolicy: Always
    useDefault:
      env: true
    env:
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: KAFKA_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-kafka:9092'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
    resources:
      limits:
        memory: 300Mi
    initContainers:
      - name: wait-for-kafka
        image: busybox:latest
        command: ['sh', '-c', 'until nc -z -v -w30 {{ include "otel-demo.name" . }}-kafka 9092; do echo waiting for kafka; sleep 2; done;']

  frontend:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-frontend
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: FRONTEND_PORT
        value: "8080"
      - name: FRONTEND_ADDR
        value: :8080
      - name: AD_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-adservice:8080'
      - name: CART_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-cartservice:8080'
      - name: CHECKOUT_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-checkoutservice:8080'
      - name: CURRENCY_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
      - name: RECOMMENDATION_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-recommendationservice:8080'
      - name: SHIPPING_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
      - name: OTEL_COLLECTOR_HOST
        value: $(OTEL_COLLECTOR_NAME)
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: WEB_OTEL_SERVICE_NAME
        value: frontend-web
      - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://localhost:8080/otlp-http/v1/traces # This expects users to use `kubectl port-forward ...`
    resources:
      limits:
        memory: 200Mi
    securityContext:
      runAsUser: 1001 # nextjs
      runAsGroup: 1001
      runAsNonRoot: true

  frontendProxy:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-frontendproxy
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: ENVOY_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: FRONTEND_HOST
        value: '{{ include "otel-demo.name" . }}-frontend'
      - name: FRONTEND_PORT
        value: "8080"
      - name: GRAFANA_SERVICE_HOST
        value: '{{ include "otel-demo.name" . }}-grafana'
      - name: GRAFANA_SERVICE_PORT
        value: "80"
      - name: IMAGE_PROVIDER_HOST
        value: '{{ include "otel-demo.name" . }}-imageprovider'
      - name: IMAGE_PROVIDER_PORT
        value: "8081"
      - name: JAEGER_SERVICE_HOST
        value: '{{ include "otel-demo.name" . }}-jaeger-query'
      - name: JAEGER_SERVICE_PORT
        value: "16686"
      - name: LOCUST_WEB_HOST
        value: '{{ include "otel-demo.name" . }}-loadgenerator'
      - name: LOCUST_WEB_PORT
        value: "8089"
      - name: OTEL_COLLECTOR_HOST
        value: $(OTEL_COLLECTOR_NAME)
      - name: OTEL_COLLECTOR_PORT_GRPC
        value: "4317"
      - name: OTEL_COLLECTOR_PORT_HTTP
        value: "4318"
    resources:
      limits:
        memory: 50Mi
    securityContext:
      runAsUser: 101  # envoy
      runAsGroup: 101
      runAsNonRoot: true

  loadgenerator:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-loadgenerator
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8089
    env:
      - name: LOCUST_WEB_PORT
        value: "8089"
      - name: LOCUST_USERS
        value: "10"
      - name: LOCUST_SPAWN_RATE
        value: "1"
      - name: LOCUST_HOST
        value: 'http://{{ include "otel-demo.name" . }}-frontendproxy:8080'
      - name: LOCUST_HEADLESS
        value: "false"
      - name: LOCUST_AUTOSTART
        value: "true"
      - name: LOCUST_BROWSER_TRAFFIC_ENABLED
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
    resources:
      limits:
        memory: 1Gi

  paymentService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-paymentservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: PAYMENT_SERVICE_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 120Mi
    securityContext:
      runAsUser: 1000 # node
      runAsGroup: 1000
      runAsNonRoot: true

  productCatalogService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-productcatalogservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: PRODUCT_CATALOG_SERVICE_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 20Mi

  quoteService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-quoteservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: QUOTE_SERVICE_PORT
        value: "8080"
      - name: OTEL_PHP_AUTOLOAD_ENABLED
        value: "true"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
    resources:
      limits:
        memory: 40Mi
    securityContext:
      runAsUser: 33 # www-data
      runAsGroup: 33
      runAsNonRoot: true

  recommendationService:
    enabled: true
    imageOverride:
      repository: bschmitt769/otel-demo
      tag: 1.9.0.1-recommendationservice-nr
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: RECOMMENDATION_SERVICE_PORT
        value: "8080"
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_PYTHON_LOG_CORRELATION
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: NEW_RELIC_APP_NAME
        value: "recommendationservice"
      - name: NEW_RELIC_LICENSE_KEY
        valueFrom:
          secretKeyRef:
            name: newrelic-key-secret
            key: new_relic_license_key
    resources:
      limits:
        memory: 500Mi # This is high to enable supporting the recommendationCache feature flag use case

  shippingService:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-shippingservice
      pullPolicy: Always
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: SHIPPING_SERVICE_PORT
        value: "8080"
      - name: QUOTE_SERVICE_ADDR
        value: 'http://{{ include "otel-demo.name" . }}-quoteservice:8080'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 20Mi

  flagd:
    enabled: true
    imageOverride:
      repository: "ghcr.io/open-feature/flagd"
      tag: "v0.10.1"
    useDefault:
      env: true
    replicas: 1
    service:
      port: 8013
    resources:
      limits:
        memory: 50Mi
    command:
      - "/flagd-build"
      - "start"
      - "--uri"
      - "file:./etc/flagd/demo.flagd.json"
    mountedConfigMaps:
      - name: config
        mountPath: /etc/flagd
        existingConfigMap: '{{ include "otel-demo.name" . }}-flagd-config'

  kafka:
    enabled: true
    imageOverride:
      repository: ghcr.io/open-telemetry/demo
      tag: 1.9.0-kafka
      pullPolicy: Always
    useDefault:
      env: true
    replicas: 1
    ports:
      - name: plaintext
        value: 9092
      - name: controller
        value: 9093
    env:
      - name: KAFKA_ADVERTISED_LISTENERS
        value: 'PLAINTEXT://{{ include "otel-demo.name" . }}-kafka:9092'
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: KAFKA_HEAP_OPTS
        value: "-Xmx400M -Xms400M"
    resources:
      limits:
        memory: 600Mi
    securityContext:
      runAsUser: 1000 # appuser
      runAsGroup: 1000
      runAsNonRoot: true

  redis:
    enabled: true
    useDefault:
      env: true
    imageOverride:
      repository: "redis"
      tag: "7.2-alpine"
    replicas: 1
    ports:
      - name: redis
        value: 6379
    resources:
      limits:
        memory: 20Mi
    securityContext:
      runAsUser: 999 # redis
      runAsGroup: 1000
      runAsNonRoot: true

jaeger:
  enabled: false
  provisionDataStore:
    cassandra: false
  allInOne:
    enabled: true
    args:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://{{ include \"otel-demo.name\" . }}-prometheus-server:9090"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    extraEnv:
      - name: METRICS_STORAGE_TYPE
        value: prometheus
    resources:
      limits:
        memory: 400Mi
  storage:
    type: memory
  agent:
    enabled: false
  collector:
    enabled: false
  query:
    enabled: false

prometheus:
  enabled: false
  alertmanager:
    enabled: false
  configmapReload:
    prometheus:
      enabled: false
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false

  server:
    extraFlags:
      - "enable-feature=exemplar-storage"
      - "enable-feature=otlp-write-receiver"
    global:
      scrape_interval: 5s
      scrape_timeout: 3s
      evaluation_interval: 30s
    persistentVolume:
      enabled: false
    service:
      servicePort: 9090
    resources:
      limits:
        memory: 300Mi

  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: 'otel-collector'
          honor_labels: true
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                own_namespace: true
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_opentelemetry_community_demo]
              action: keep
              regex: true

grafana:
  enabled: false
  grafana.ini:
    auth:
      disable_login_form: true
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Admin
    server:
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
      serve_from_sub_path: true
  adminPassword: admin
  plugins:
    - grafana-opensearch-datasource
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          uid: webstore-metrics
          type: prometheus
          url: 'http://{{ include "otel-demo.name" . }}-prometheus-server:9090'
          editable: true
          isDefault: true
          jsonData:
            exemplarTraceIdDestinations:
              - datasourceUid: webstore-traces
                name: trace_id

              - url: http://localhost:8080/jaeger/ui/trace/$${__value.raw}
                name: trace_id
                urlDisplayLabel: View in Jaeger UI

        - name: Jaeger
          uid: webstore-traces
          type: jaeger
          url: 'http://{{ include "otel-demo.name" . }}-jaeger-query:16686/jaeger/ui'
          editable: true
          isDefault: false

        - name: OpenSearch
          type: grafana-opensearch-datasource
          url: 'http://otel-demo-opensearch:9200/'
          access: proxy
          editable: true
          isDefault: false
          jsonData:
            database: otel
            flavor: opensearch
            logLevelField: severity
            logMessageField: body
            pplEnabled: true
            timeField: observedTimestamp
            version: 2.13.0
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  dashboardsConfigMaps:
    default: '{{ include "otel-demo.name" . }}-grafana-dashboards'
  resources:
    limits:
      memory: 150Mi

opensearch:
  enabled: true
  fullnameOverride: otel-demo-opensearch
  clusterName: demo-cluster
  nodeGroup: otel-demo
  singleNode: true
  opensearchJavaOpts: "-Xms300m -Xmx300m"
  persistence:
    enabled: false
  extraEnvs:
    - name: "bootstrap.memory_lock"
      value: "true"
    - name: "DISABLE_INSTALL_DEMO_CONFIG"
      value: "true"
    - name: "DISABLE_SECURITY_PLUGIN"
      value: "true"
  resources:
    limits:
      memory: 1Gi
